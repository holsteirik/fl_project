nR <- 1000  # You can increase this number for more stable estimates
# Run bootstrapping on the dataset
results <- boot(data_raw, statistic = bootstrap_anova, R = nR)
# Print the results
print(results)
# Histogram of bootstrapped p-values
hist(results$t, main = "Histogram of Bootstrapped P-Values", xlab = "P-Value", breaks = 30)
# Calculating the bootstrapped p-value
boot_p_value <- sum(results$t <= 0.05) / nR  # Proportion of times p-value was less than 0.05
print(paste("Bootstrapped P-Value:", boot_p_value))
# Bootstrapping function for ANOVA to return p-values for each predictor
bootstrap_anova <- function(data, indices) {
# Resample the data
d <- data[indices, ]
# Fit the model on the resampled data
fit <- lm(BRIEF_AI_T ~ as.factor(KJONN) + agree + consci + neuro + BDIsum + BAIsum + SumbisNoFour, data = d)
# Compute the ANOVA
aov_results <- Anova(fit, type="III")
# Extract p-values for all predictors (excluding the intercept)
p_values <- summary(aov_results)$'Pr(>F)'[-1]  # Assuming the first row is the intercept
return(p_values)
}
# Set the number of bootstrap replications
nR <- 1000  # Adjust this number based on your computational resources
# Run bootstrapping on the dataset
results <- boot(data_raw, statistic = bootstrap_anova, R = nR)
# Histograms of bootstrapped p-values for each predictor
par(mfrow = c(2, 3))  # Adjust layout based on the number of predictors
for (i in 1:ncol(results$t)) {
hist(results$t[, i], main = paste("P-Values for Predictor", i), xlab = "P-Value", breaks = 30)
}
# Calculating the proportion of significant p-values for each predictor
boot_p_values <- colSums(results$t <= 0.05) / nR
print(boot_p_values)
library(car)
# Example model fit
fit <- lm(BRIEF_AI_T ~ as.factor(KJONN) + agree + consci + neuro + BDIsum + BAIsum + SumbisNoFour, data = data_raw)
# Run ANOVA
aov_results <- Anova(fit, type="III")
print(aov_results)
p_values <- summary(aov_results)[["Pr(>F)"]][-1]  # Adjust according to actual output
bootstrap_anova <- function(data, indices) {
# Resample the data
d <- data[indices, ]
# Fit the model on the resampled data
fit <- lm(BRIEF_AI_T ~ as.factor(KJONN) + agree + consci + neuro + BDIsum + BAIsum + SumbisNoFour, data = d)
# Compute the ANOVA
aov_results <- Anova(fit, type="III")
# Correctly extract p-values (assuming summary provides a matrix or dataframe)
p_values <- summary(aov_results)[["Pr(>F)"]][-1]  # Assuming first row is the intercept
return(p_values)
}
results <- boot(data_raw, statistic = bootstrap_anova, R = nR)
######
coef_function <- function(formula, data, indicies) {
data <- data[indecies,]
fit <- lm(BRIEF_AI_T ~ as.factor(KJONN) + agree + consci +
neuro + BDIsum + BAIsum + SumbisNoFour, data = data_raw)
return(coef(fit))
}
# boot 2000
reps <- boot(data,mtcars, statistic=coef_function, R=2000, formula=mpg~disp)
reps <- boot(data=mtcars, statistic=coef_function, R=2000, formula=mpg~disp)
# boot 2000
reps <- boot(data,mtcars, statistic=coef_function, R=2000, formula=BRIEF_AI_T ~ as.factor(KJONN) + agree + consci +
neuro + BDIsum + BAIsum + SumbisNoFour)
reps <- boot(data=mtcars, statistic=coef_function, R=2000, formula=mpg~disp)
oef_function <- function(formula, data, indicies) {
data <- data[indecies,]
fit <- lm(BRIEF_AI_T ~ as.factor(KJONN) + agree + consci +
neuro + BDIsum + BAIsum + SumbisNoFour, data = data_raw)
return(coef(fit))
}
# boot 2000
reps <- boot(data=mtcars, statistic=coef_function, R=2000, formula=mpg~disp)
coef_function <- function(formula, data, indicies) {
data <- data[indecies,]
fit <- lm(BRIEF_AI_T ~ as.factor(KJONN) + agree + consci +
neuro + BDIsum + BAIsum + SumbisNoFour, data = data_raw)
return(coef(fit))
}
# boot 2000
reps <- boot(data=mtcars, statistic=coef_function, R=2000, formula=mpg~disp)
reps <- boot(data=mtcars, statistic=coef_function, R=2000, formula=mpg~disp)
# boot 2000
reps <- boot(data=mtcars, statistic=coef_function, R=2000, formula=BRIEF_AI_T ~ as.factor(KJONN) + agree + consci +
neuro + BDIsum + BAIsum + SumbisNoFour)
data <- data[indices,]
coef_function <- function(data, indices) {
# Subset data using indices provided by boot()
d <- data[indices,]
coef_function <- function(data, indices) {
# Subset data using indices provided by boot()
d <- data[indices,]
# Fit the model on the resampled data
fit <- lm(BRIEF_AI_T ~ as.factor(KJONN) + agree + consci +
neuro + BDIsum + BAIsum + SumbisNoFour, data = d)
# Return coefficients
return(coef(fit))
}
# Load necessary library
library(boot)
# Assuming data_raw is your actual dataset
results <- boot(data=data_raw, statistic=coef_function, R=2000)
# Print the results
print(results)
data <- data[indices,]
fit <- lm(BRIEF_AI_T ~ as.factor(KJONN) + agree + consci +
neuro + BDIsum + BAIsum + SumbisNoFour, data = data_raw)
return(coef(fit))
######
coef_function <- function(formula, data, indicies) {
data <- data[indices,]
fit <- lm(BRIEF_AI_T ~ as.factor(KJONN) + agree + consci +
neuro + BDIsum + BAIsum + SumbisNoFour, data = data_raw)
return(coef(fit))
}
# Fit the model on the resampled data
reps <- lm(BRIEF_AI_T ~ as.factor(KJONN) + agree + consci +
neuro + BDIsum + BAIsum + SumbisNoFour, data = d)
reps <- boot(data=mtcars, statistic=coef_function, R=2000, formula=BRIEF_AI_T ~ as.factor(KJONN) + agree + consci +
neuro + BDIsum + BAIsum + SumbisNoFour)
reps
reps
######
coef_function <- function(formula, data, indicies) {
data <- data[indices,]
fit <- lm(BRIEF_AI_T ~ as.factor(KJONN) + agree + consci +
neuro + BDIsum + BAIsum + SumbisNoFour, data = data_raw)
return(coef(fit))
}
# boot 2000
reps <- boot(data=mtcars, statistic=coef_function, R=2000, formula=BRIEF_AI_T ~ as.factor(KJONN) + agree + consci +
neuro + BDIsum + BAIsum + SumbisNoFour)
reps <- boot(data=mtcars, statistic=coef_function, R=2000, formula=BRIEF_AI_T ~ as.factor(KJONN) + agree + consci +
neuro + BDIsum + BAIsum + SumbisNoFour)
# boot 2000
reps <- boot(data=mtcars, statistic=coef_function, R=2000, formula=BRIEF_AI_T ~ as.factor(KJONN) + agree + consci +
neuro + BDIsum + BAIsum + SumbisNoFour, data = data)
library(boot)
coef_function <- function(formula, data, indicies) {
data <- data[indices,]
fit <- lm(BRIEF_AI_T ~ as.factor(KJONN) + agree + consci +
neuro + BDIsum + BAIsum + SumbisNoFour, data = data_raw)
return(coef(fit))
}
# boot 2000
reps <- boot(data=mtcars, statistic=coef_function, R=2000, formula=BRIEF_AI_T ~ as.factor(KJONN) + agree + consci +
neuro + BDIsum + BAIsum + SumbisNoFour)
######
coef_function <- function(formula, data, indices) {
data <- data[indices,]
fit <- lm(BRIEF_AI_T ~ as.factor(KJONN) + agree + consci +
neuro + BDIsum + BAIsum + SumbisNoFour, data = data_raw)
return(coef(fit))
}
# boot 2000
reps <- boot(data=mtcars, statistic=coef_function, R=2000, formula=BRIEF_AI_T ~ as.factor(KJONN) + agree + consci +
neuro + BDIsum + BAIsum + SumbisNoFour)
coef_function <- function(data, indices, formula) {
d <- data[indices,]  # Subset the data correctly
fit <- lm(formula, data = d)  # Use the formula argument correctly
return(coef(fit))
}
# Load necessary library
library(boot)
# Define the formula
my_formula <- BRIEF_AI_T ~ as.factor(KJONN) + agree + consci + neuro + BDIsum + BAIsum + SumbisNoFour
# Assuming data_raw is your actual dataset and contains the necessary variables
reps <- boot(data=data_raw, statistic=coef_function, R=2000, formula=my_formula)
# Print the results
print(reps)
# Define the bootstrap function
# This function should return the statistics of interest for each bootstrap sample.
bootstrap_function <- function(data, indices) {
sample_data <- data[indices, ]  # Resample the data
# Calculate Spearman's rank correlation between Sepal.Length and Sepal.Width
correlation <- cor(sample_data$Sepal.Length, sample_data$Sepal.Width, method = 'spearman')
# Calculate medians of Sepal.Length and Sepal.Width
median_length <- median(sample_data$Sepal.Length)
median_width <- median(sample_data$Sepal.Width)
return(c(correlation, median_length, median_width))
}
# Run the bootstrap
set.seed(123)  # For reproducibility
results <- boot(data = iris, statistic = bootstrap_function, R = 2000)
# Calculate basic bootstrap confidence intervals for each statistic
ci_correlation <- boot.ci(results, type = c("norm", "basic", "perc", "bca"), index = 1)
ci_median_length <- boot.ci(results, type = c("norm", "basic", "perc", "bca"), index = 2)
ci_median_width <- boot.ci(results, type = c("norm", "basic", "perc", "bca"), index = 3)
# Print the confidence intervals
print(ci_correlation)
print(ci_median_length)
print(ci_median_width)
library(haven)
library(psych)
library(ggplot2)
library(dplyr)
library(rwa)
library(modelsummary)
library(cowplot)
data_raw <- read_sav("data/forskerlinje_friskestudenter_rettet_16_april.sav")
options(max.print = 2500)
describe(data_raw)
# Rename variables
names(data_raw)[names(data_raw) == "SumbisNoFour"] <- "Insomnia"
names(data_raw)[names(data_raw) == "consci"] <- "Conscientiousness"
names(data_raw)[names(data_raw) == "agree"] <- "Agreeableness"
names(data_raw)[names(data_raw) == "neuro"] <- "Neuroticism"
names(data_raw)[names(data_raw) == "BAIsum"] <- "Anxiety"
names(data_raw)[names(data_raw) == "BDIsum"] <- "Depression"
names(data_raw)[names(data_raw) == "BRIEF_AI_T"] <- "Behavioral_regulation"
names(data_raw)[names(data_raw) == "BRIEF_MI_T"] <- "Metacognition"
options(max.print = 2500)
describe(data_raw)
data_raw |>
mutate(
across(c(Behavioral_regulation, Conscientiousness, Agreeableness, Neuroticism,
Depression, Anxiety, Insomnia, BRIEF_IMPULSHEMMING_T, BRIEF_FLEKSIBILITET_T,
BRIEF_EMOSJONELLKONTROLL_T, BRIEF_SELVMONITORERING_T, BRIEF_INITIERING_T,
BRIEF_ARBEIDSHUKOMMELSE_T, BRIEF_PLANLEGGING_T, BRIEF_OPPGAVEMONITORERING_T,
BRIEF_ORGANISERING_T),
scale), .before=1) ->
data
names(data)[names(data) == "KJONN"] <- "Sex"
impulse <- lm(BRIEF_IMPULSHEMMING_T ~ Sex + Insomnia + Conscientiousness +
Agreeableness + Neuroticism + Anxiety + Depression, data = data)
summary(impulse)
###############
# Define the function
run_regression <- function(dependent_var, data) {
# Construct the formula dynamically
formula <- as.formula(paste(dependent_var, "~ Sex + Insomnia + Conscientiousness +
Agreeableness + Neuroticism + Anxiety + Depression"))
# Run the linear model
model <- lm(formula, data = data)
# Return the model
return(model)
}
# Example usage with a different dependent variable
impulse <- run_regression("BRIEF_IMPULSHEMMING_T ", data)
summary(impulse)
flexibility <- run_regression("BRIEF_FLEKSIBILITET_T ", data)
summary(flexibility)
# Plots
modelplot(impulse, coef_omit = 'Interc')
modelplot(flexibility, coef_omit = 'Interc')
###############
predictor_order <- c("Sex", "Insomnia", "Conscientiousness", "Agreeableness",
"Neuroticism", "Anxiety", "Depression")
# Define the regression function
run_regression <- function(dependent_var, data) {
formula <- as.formula(paste(dependent_var, "~ Sex + Insomnia + Conscientiousness +
Agreeableness + Neuroticism + Anxiety + Depression"))
model <- lm(formula, data = data)
return(model)
}
# Run regression for different dependent variables
impulse <- run_regression("BRIEF_IMPULSHEMMING_T", data)
flexibility <- run_regression("BRIEF_FLEKSIBILITET_T", data)
# Extract coefficients and calculate confidence intervals
extract_data <- function(model) {
coefs <- summary(model)$coefficients
data.frame(
Term = rownames(coefs),
Estimate = coefs[, "Estimate"],
StdError = coefs[, "Std. Error"],
CI_lower = coefs[, "Estimate"] - 1.96 * coefs[, "Std. Error"],
CI_upper = coefs[, "Estimate"] + 1.96 * coefs[, "Std. Error"]
)
}
impulse_data <- extract_data(impulse)
flexibility_data <- extract_data(flexibility)
# Horizontal plot for Impulse Control
plot_impulse <- ggplot(impulse_data, aes(y = Term, x = Estimate, xmin = CI_lower, xmax = CI_upper)) +
geom_errorbarh(height = 0.2) +
geom_vline(xintercept = 0, linetype = "dashed") +
labs(title = "Impulse Control Regression Coefficients",
y = "Predictor", x = "Coefficient Estimate") +
theme_minimal() +
theme(axis.text.y = element_text(angle = 0))
# Print the Impulse Control plot
print(plot_impulse)
# Horizontal plot for Flexibility
plot_flexibility <- ggplot(flexibility_data[flexibility_data$Term != "(Intercept)", ],
aes(y = Term, x = Estimate, xmin = CI_lower, xmax = CI_upper)) +
geom_errorbarh(height = 0.1) +
geom_point() +
geom_vline(xintercept = 0, linetype = "dashed", alpha = 0.5) +
labs(title = "Flexibility Regression Coefficients",
y = "Predictor", x = "Coefficient Estimate") +
theme_minimal() +
theme(axis.text.y = element_text(angle = 0))
# Print the Flexibility plot
print(plot_flexibility)
##############
run_regression_and_plot <- function(dependent_var, plot_title, data, show_y_axis_labels, show_x_axis_label) {
# Run the regression
model <- lm(as.formula(paste(dependent_var, "~ Sex + Insomnia + Conscientiousness +
Agreeableness + Neuroticism + Anxiety + Depression")), data = data)
# Extract coefficients and calculate confidence intervals
coefs <- summary(model)$coefficients
regression_data <- data.frame(
Term = factor(rownames(coefs), levels = c("(Intercept)", "Sex", "Insomnia", "Conscientiousness",
"Agreeableness", "Neuroticism", "Anxiety", "Depression")),
Estimate = coefs[, "Estimate"],
CI_lower = coefs[, "Estimate"] - 1.96 * coefs[, "Std. Error"],
CI_upper = coefs[, "Estimate"] + 1.96 * coefs[, "Std. Error"]
)
# Create the plot
plot <- ggplot(regression_data[regression_data$Term != "(Intercept)", ],
aes(y = Term, x = Estimate, xmin = CI_lower, xmax = CI_upper)) +
geom_errorbarh(height = 0.2) +
geom_point() +
geom_vline(xintercept = 0, linetype = "dashed", alpha = 0.5) +
labs(title = plot_title,
y = if(show_y_axis_labels) "Predictor" else NULL,
x = if(show_x_axis_label) "Coefficient Estimate" else NULL) +
scale_x_continuous(limits = c(-0.70, 0.70)) +
theme_minimal() +
theme(axis.text.y = element_text(angle = 0, hjust = 1),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line.y = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=1),
plot.margin = unit(c(5.5, 5.5, 5.5, 5.5), "pt"))
if (!show_y_axis_labels) {
plot <- plot + theme(axis.text.y = element_blank())
}
# Return the model and plot
return(list(model = model, plot = plot))
}
# List of dependent variables and corresponding new names
dependent_vars <- c("BRIEF_IMPULSHEMMING_T", "BRIEF_FLEKSIBILITET_T", "BRIEF_EMOSJONELLKONTROLL_T",
"BRIEF_SELVMONITORERING_T", "BRIEF_INITIERING_T", "BRIEF_ARBEIDSHUKOMMELSE_T",
"BRIEF_PLANLEGGING_T", "BRIEF_OPPGAVEMONITORERING_T", "BRIEF_ORGANISERING_T")
new_names <- c("Inhibit", "Shift", "Emotional Control", "Self Monitor", "Initiate", "Working memory",
"Plan/Organize", "Task monitor", "Organization Of Materials")
# Create an empty list to store the plots
plots <- list()
# Loop through the dependent variables and their corresponding new names
for (i in seq_along(dependent_vars)) {
show_y_axis_labels <- i %in% c(1, 4, 7)
show_x_axis_label <- i == 8
result <- run_regression_and_plot(dependent_vars[i], new_names[i], data, show_y_axis_labels, show_x_axis_label)
plots[[i]] <- result$plot
}
library(patchwork)
plots[[1]] +
plots[[2]] +
plots[[3]] +
plots[[4]] +
plots[[5]] +
plots[[6]] +
plots[[7]] +
plots[[8]] +
plots[[9]] +
plot_layout(ncol=3)
library(haven)
library(dplyr)
library(car)
library(boot)
library(writexl)
# Load your data
data_raw <- read_sav("data/forskerlinje_friskestudenter_rettet_16_april.sav")
model <- manova(cbind(BRIEF_AI_T, BRIEF_MI_T) ~ as.factor(KJONN) + agree +
consci + neuro + BDIsum + BAIsum + SumbisNoFour,
data = data_raw)
################################################################################
# Multivariate resultater med type 3 ss med Car
model_2 <- manova(cbind(BRIEF_AI_T, BRIEF_MI_T) ~ as.factor(KJONN) + agree +
consci + neuro + BDIsum + BAIsum + SumbisNoFour,
data = data_raw)
Anova(model_2, type = "III")
# Univariate resultatet
lm_BRIEF_AI_T <- lm(BRIEF_AI_T ~ as.factor(KJONN) + agree + consci +
neuro + BDIsum + BAIsum + SumbisNoFour, data = data_raw)
lm_BRIEF_MI_T <- lm(BRIEF_MI_T ~ as.factor(KJONN) + agree + consci + neuro +
BDIsum + BAIsum + SumbisNoFour, data = data_raw)
anova_BRIEF_AI_T <- Anova(lm_BRIEF_AI_T, type="III")
anova_BRIEF_MI_T <- Anova(lm_BRIEF_MI_T, type="III")
print(anova_BRIEF_AI_T)
print(anova_BRIEF_MI_T)
# Parameter estimates
summary(lm_BRIEF_AI_T)
summary(lm_BRIEF_MI_T)
##############
# Bootstrap
coef_function <- function(data, indices) {
d <- data[indices,]
fit <- lm(BRIEF_AI_T ~ as.factor(KJONN) + agree + consci + neuro + BDIsum + BAIsum + SumbisNoFour, data = d)
return(coef(fit))
}
coef_function_MI <- function(data, indices) {
d <- data[indices,]
fit <- lm(BRIEF_MI_T ~ as.factor(KJONN) + agree + consci + neuro + BDIsum + BAIsum + SumbisNoFour, data = d)
return(coef(fit))
}
# Set the seed for reproducibility
set.seed(1337)
# Bootstrap for AI
reps_AI <- boot(data=data_raw, statistic=coef_function, R=2000)
# Bootstrap for MI
reps_MI <- boot(data=data_raw, statistic=coef_function_MI, R=2000)
print_ci <- function(boot_results, model_name) {
cat("\nConfidence Intervals for Model", model_name, ":\n")
# Extract coefficient names from the first row of bootstrap replicates if t0 does not work
coef_names <- names(boot_results$t0)
for (i in 1:length(coef_names)) {
# Extract CI using boot.ci for the ith coefficient
ci <- boot.ci(boot_results, type="norm", index=i)
if (!is.null(ci$normal)) {  # Check if the normal CI is available
normal_ci <- ci$normal[c(2,3)]  # Extract the CI bounds
cat(coef_names[i], ": ", sprintf("[%.4f, %.4f]", normal_ci[1], normal_ci[2]), "\n")
} else {
cat(coef_names[i], ": CI not available\n")
}
}
}
# Print CIs for BRIEF_AI_T
print_ci(reps_AI, "BRIEF_AI_T")
# Print CIs for BRIEF_MI_T
print_ci(reps_MI, "BRIEF_MI_T")
write_xlsx(reps_AI, "bri_boot.xlsx")
check_model(lm_BRIEF_AI_T)
library(performance)
check_model(lm_BRIEF_AI_T)
png("plot.png")
# Your plotting code here
dev.off()
check_model(lm_BRIEF_AI_T)
dev.new()
# Your plotting code here
dev.off()
check_model(lm_BRIEF_AI_T)
png("output.png")
# your plotting code
dev.off()
check_model(lm_BRIEF_AI_T)
png("check_model_output.png")
performance::check_model(your_model)
png("check_model_output.png")
performance::check_model(lm_BRIEF_AI_T)
dev.off()
X11() # or windows() on Windows
performance::check_model(lm_BRIEF_AI_T)
dev.off()
sessionInfo()
detach("package:conflicting_package", unload=TRUE)
install.packages(c("backports", "cli", "crayon", "fastmap", "ggeffects", "lme4", "minqa", "nlme", "nloptr", "psychonetrics", "rlang", "stringi"))
# Unload some packages that might interfere
detach("package:modelsummary", unload=TRUE)
detach("package:rwa", unload=TRUE)
detach("package:car", unload=TRUE)
detach("package:carData", unload=TRUE)
check_model(lm_BRIEF_AI_T)
# Open a new graphics device window
X11()  # or windows() on Windows
# Run check_model()
performance::check_model(lm_BRIEF_AI_T)
# Close the graphics device
dev.off()
# Load the performance package
library(performance)
# Create a simple linear model
model <- lm(mpg ~ wt + hp, data = mtcars)
# Check model diagnostics
performance::check_model(model)
remove.packages("performance")
install.packages("performance")
install.packages("performance")
# Ensure the performance package is loaded
library(performance)
# Create a simple linear model as a minimal example
model <- lm(mpg ~ wt + hp, data = mtcars)
# Use an external graphics device
X11()  # or windows() on Windows
# Check model diagnostics
performance::check_model(model)
# Close the graphics device
dev.off()
dev.list()
packageVersion("performance")
performance::check_model(model)
.rs.restartR()
remove.packages("performance")
# Restart R session again to clear any lingering package states
.rs.restartR()
# Install the performance package
install.packages("performance")
library(performance)
install.packages("performance")
check_model(lm_BRIEF_AI_T)
library(performance)
check_model(lm_BRIEF_AI_T)
library(performance)
packageVersion("performance")
# Restart R session
.rs.restartR()
# Remove the performance package
remove.packages("performance")
.libPaths()
.libPaths("C:/R_library/library")
install.packages(c("backports", "cli", "fastmap", "nlme", "rlang"))
anova_BRIEF_AI_T <- Anova(lm_BRIEF_AI_T, type="III")
anova_BRIEF_MI_T <- Anova(lm_BRIEF_MI_T, type="III")
# Remove the performance package if installed
remove.packages("performance")
# Restart R session again
.rs.restartR()
# Install the performance package
install.packages("performance")
