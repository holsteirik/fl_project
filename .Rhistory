sapply(boot_pvalues$t, function(p) mean(p < level))
}
# Calculate significance proportions for each predictor in BRIEF_AI_T model
significance_proportions_AI <- calculate_significance_proportion(boot_results_AI_pvalues)
print("Proportion of significant p-values for BRIEF_AI_T model:")
print(significance_proportions_AI)
# Calculate significance proportions for each predictor in BRIEF_MI_T model
significance_proportions_MI <- calculate_significance_proportion(boot_results_MI_pvalues)
print("Proportion of significant p-values for BRIEF_MI_T model:")
print(significance_proportions_MI)
######
# Bootstrap function for the BRIEF_AI_T model
boot_function_AI <- function(data, indices) {
data_sample <- data[indices, ]  # Resample the data
model <- lm(BRIEF_AI_T ~ as.factor(KJONN) + agree + consci + neuro + BDIsum + BAIsum + SumbisNoFour, data = data_sample)
p_values <- summary(model)$coefficients[, 4]  # Extract p-values
return(p_values)
}
# Bootstrap function for the BRIEF_MI_T model
boot_function_MI <- function(data, indices) {
data_sample <- data[indices, ]  # Resample the data
model <- lm(BRIEF_MI_T ~ as.factor(KJONN) + agree + consci + neuro + BDIsum + BAIsum + SumbisNoFour, data = data_sample)
p_values <- summary(model)$coefficients[, 4]  # Extract p-values
return(p_values)
}
# Set the number of bootstrap replicates
n_bootstraps <- 5000
# Perform bootstrap for the BRIEF_AI_T model
boot_results_AI <- boot(data = data_raw, statistic = boot_function_AI, R = n_bootstraps)
# Perform bootstrap for the BRIEF_MI_T model
boot_results_MI <- boot(data = data_raw, statistic = boot_function_MI, R = n_bootstraps)
# Calculate 95% Confidence Intervals for the p-values from the BRIEF_AI_T model
ci_p_values_AI <- apply(boot_results_AI$t, 2, function(x) quantile(x, probs = c(0.025, 0.975)))
# Calculate 95% Confidence Intervals for the p-values from the BRIEF_MI_T model
ci_p_values_MI <- apply(boot_results_MI$t, 2, function(x) quantile(x, probs = c(0.025, 0.975)))
# Print the confidence intervals
print("Confidence Intervals for P-values (BRIEF_AI_T):")
print(ci_p_values_AI)
print("Confidence Intervals for P-values (BRIEF_MI_T):")
print(ci_p_values_MI)
######
# Bootstrap function for the BRIEF_AI_T model with predictor names
boot_function_AI <- function(data, indices) {
data_sample <- data[indices, ]  # Resample the data
model <- lm(BRIEF_AI_T ~ as.factor(KJONN) + agree + consci + neuro + BDIsum + BAIsum + SumbisNoFour, data = data_sample)
p_values <- summary(model)$coefficients[, 4]  # Extract p-values
names <- rownames(summary(model)$coefficients)  # Extract predictor names
return(cbind(names, p_values))  # Combine names and p-values
}
# Bootstrap function for the BRIEF_MI_T model with predictor names
boot_function_MI <- function(data, indices) {
data_sample <- data[indices, ]  # Resample the data
model <- lm(BRIEF_MI_T ~ as.factor(KJONN) + agree + consci + neuro + BDIsum + BAIsum + SumbisNoFour, data = data_sample)
p_values <- summary(model)$coefficients[, 4]  # Extract p-values
names <- rownames(summary(model)$coefficients)  # Extract predictor names
return(cbind(names, p_values))  # Combine names and p-values
}
# Perform bootstrap for the BRIEF_AI_T model
boot_results_AI <- boot(data = data_raw, statistic = boot_function_AI, R = 5000)
# Perform bootstrap for the BRIEF_MI_T model
boot_results_MI <- boot(data = data_raw, statistic = boot_function_MI, R = 5000)
# Calculate 95% Confidence Intervals for the p-values from the BRIEF_AI_T model
ci_p_values_AI <- apply(boot_results_AI$t[, 2, drop = FALSE], 2, function(x) quantile(as.numeric(x), probs = c(0.025, 0.975)))
######
# Bootstrap function for the BRIEF_AI_T model with numeric p-values
boot_function_AI <- function(data, indices) {
data_sample <- data[indices, ]  # Resample the data
model <- lm(BRIEF_AI_T ~ as.factor(KJONN) + agree + consci + neuro + BDIsum + BAIsum + SumbisNoFour, data = data_sample)
p_values <- summary(model)$coefficients[, 4]  # Extract p-values
return(as.numeric(p_values))  # Ensure p-values are numeric
}
# Bootstrap function for the BRIEF_MI_T model with numeric p-values
boot_function_MI <- function(data, indices) {
data_sample <- data[indices, ]  # Resample the data
model <- lm(BRIEF_MI_T ~ as.factor(KJONN) + agree + consci + neuro + BDIsum + BAIsum + SumbisNoFour, data = data_sample)
p_values <- summary(model)$coefficients[, 4]  # Extract p-values
return(as.numeric(p_values))  # Ensure p-values are numeric
}
# Perform bootstrap for the BRIEF_AI_T model
boot_results_AI <- boot(data = data_raw, statistic = boot_function_AI, R = 5000)
# Perform bootstrap for the BRIEF_MI_T model
boot_results_MI <- boot(data = data_raw, statistic = boot_function_MI, R = 5000)
# Calculate 95% Confidence Intervals for the p-values from the BRIEF_AI_T model
ci_p_values_AI <- apply(boot_results_AI$t, 2, function(x) quantile(x, probs = c(0.025, 0.975)))
# Calculate 95% Confidence Intervals for the p-values from the BRIEF_MI_T model
ci_p_values_MI <- apply(boot_results_MI$t, 2, function(x) quantile(x, probs = c(0.025, 0.975)))
# Print the confidence intervals with predictor names for BRIEF_AI_T
cat("Confidence Intervals for P-values (BRIEF_AI_T):\n")
print(data.frame(Predictor = predictor_names, CI_Lower = ci_p_values_AI[1,], CI_Upper = ci_p_values_AI[2,]))
# Extract predictor names from the model
predictor_names_AI <- names(coef(lm_BRIEF_AI_T))
predictor_names_MI <- names(coef(lm_BRIEF_MI_T))
# Print the confidence intervals with predictor names for BRIEF_AI_T
cat("Confidence Intervals for P-values (BRIEF_AI_T):\n")
print(data.frame(Predictor = predictor_names_AI, CI_Lower = ci_p_values_AI[1,], CI_Upper = ci_p_values_AI[2,]))
# Print the confidence intervals with predictor names for BRIEF_MI_T
cat("Confidence Intervals for P-values (BRIEF_MI_T):\n")
print(data.frame(Predictor = predictor_names_MI, CI_Lower = ci_p_values_MI[1,], CI_Upper = ci_p_values_MI[2,]))
library(boot)
# Define a simple bootstrap function that returns coefficients
boot_coef <- function(data, indices) {
resampled_data <- data[indices, ]
model <- lm(BRIEF_AI_T ~ as.factor(KJONN) + agree + consci + neuro + BDIsum + BAIsum + SumbisNoFour, data = resampled_data)
return(coef(model))
}
# Perform the bootstrap
set.seed(123)  # for reproducibility
results <- boot(data_raw, statistic = boot_coef, R = 1000)
# Calculate percentile confidence intervals
ci <- boot.ci(results, type = "perc")
# Print the confidence intervals
print(ci)
library(boot)
# Define a simple bootstrap function that returns coefficients
boot_coef <- function(data, indices) {
resampled_data <- data[indices, ]
model <- lm(BRIEF_AI_T ~ as.factor(KJONN) + agree + consci + neuro + BDIsum + BAIsum + SumbisNoFour, data = resampled_data)
return(coef(model))
}
# Perform the bootstrap
set.seed(123)  # for reproducibility
results <- boot(data_raw, statistic = boot_coef, R = 1000)
# Calculate percentile confidence intervals
ci <- boot.ci(results, type = "perc")
# Print the confidence intervals
print(ci)
library(haven)
library(psych)
library(ggplot2)
library(dplyr)
library(rwa)
data <- read_sav("data/forskerlinje_friskestudenter_rettet_16_april.sav")
# Rename variables
names(data)[names(data) == "KJONN"] <- "Sex"
names(data)[names(data) == "SumbisNoFour"] <- "Insomnia"
names(data)[names(data) == "consci"] <- "Conscientiousness"
names(data)[names(data) == "agree"] <- "Agreeableness"
names(data)[names(data) == "open"] <- "Openness"
names(data)[names(data) == "extra"] <- "Extraversion"
names(data)[names(data) == "neuro"] <- "Neuroticism"
names(data)[names(data) == "BAIsum"] <- "Anxiety"
names(data)[names(data) == "BDIsum"] <- "Depression"
options(max.print = 2500)
describe(data)
fit <- lm(cbind(BRIEF_AI_T, BRIEF_MI_T) ~ as.factor(Sex) +
Agreeableness + Conscientiousness + Neuroticism +
Depression + Anxiety + Insomnia, data = data)
Sex <- as.numeric(data$Sex)
# Relative weight analysis
behaviour <- data %>%
rwa(outcome = "BRIEF_AI_T",
predictors = c("Sex", "Agreeableness", "Conscientiousness",
"Neuroticism", "Depression", "Anxiety", "Insomnia"),
applysigns = TRUE,
plot = TRUE)
meta <- data %>%
rwa(outcome = "BRIEF_MI_T",
predictors = c("Sex", "Agreeableness", "Conscientiousness",
"Neuroticism", "Depression", "Anxiety", "Insomnia"),
applysigns = T,
plot = T)
behaviour
meta
Sex <- as.factor(data$Sex)
# Relative weight analysis
behaviour <- data %>%
rwa(outcome = "BRIEF_AI_T",
predictors = c("Sex", "Agreeableness", "Conscientiousness",
"Neuroticism", "Depression", "Anxiety", "Insomnia"),
applysigns = TRUE,
plot = TRUE)
library(modelplot)
library(modelsummary)
describe(data())
data <- read_sav("data/forskerlinje_friskestudenter_rettet_16_april.sav")
library(haven)
library(psych)
library(ggplot2)
library(dplyr)
library(rwa)
library(modelsummary)
data <- read_sav("data/forskerlinje_friskestudenter_rettet_16_april.sav")
# Rename variables
names(data)[names(data) == "KJONN"] <- "Sex"
describe(data)
options(max.print = 2500)
describe(data_raw)
describe(data)
# Rename variables
names(data)[names(data) == "KJONN"] <- "Sex"
names(data)[names(data) == "SumbisNoFour"] <- "Insomnia"
names(data)[names(data) == "consci"] <- "Conscientiousness"
names(data)[names(data) == "agree"] <- "Agreeableness"
names(data)[names(data) == "open"] <- "Openness"
names(data)[names(data) == "extra"] <- "Extraversion"
names(data)[names(data) == "neuro"] <- "Neuroticism"
names(data)[names(data) == "BAIsum"] <- "Anxiety"
names(data)[names(data) == "BDIsum"] <- "Depression"
names(data)[names(data) == "BRIEF_AI_T"] <- "Behavioral regulation"
names(data)[names(data) == "BRIEF_MI_T"] <- "Metacognition"
options(max.print = 2500)
describe(data)
data_raw |>
mutate(
across(c(Behavioral regulation, Metacognition, Conscientiousness, Agreeableness, Neuroticism,
names(data)[names(data) == "BRIEF_AI_T"] <- "Behavioral regulation"
names(data)[names(data) == "BRIEF_MI_T"] <- "Metacognition"
data_raw |>
mutate(
across(c(Behavioral Behavioral regulation, Conscientiousness, Agreeableness, Neuroticism,
data_raw |>
mutate(
across(c(Behavioral regulation, Conscientiousness, Agreeableness, Neuroticism,
names(data)[names(data) == "BRIEF_AI_T"] <- "Behavioral_regulation"
data_raw |>
mutate(
across(c(Behavioral_regulation, Conscientiousness, Agreeableness, Neuroticism,
Depression, Anxiety, Insomnia), scale), .before=1) ->
data
data_raw <- read_sav("data/forskerlinje_friskestudenter_rettet_16_april.sav")
describe(data.raw)
data_raw |>
mutate(
across(c(Behavioral_regulation, Conscientiousness, Agreeableness, Neuroticism,
Depression, Anxiety, Insomnia), scale), .before=1) ->
data
data_raw <- read_sav("data/forskerlinje_friskestudenter_rettet_16_april.sav")
options(max.print = 2500)
describe(data.raw)
data_raw <- read_sav("data/forskerlinje_friskestudenter_rettet_16_april.sav")
options(max.print = 2500)
# Rename variables
names(data.raw)[names(data.raw) == "KJONN"] <- "Sex"
names(data.raw)[names(data.raw) == "SumbisNoFour"] <- "Insomnia"
data_raw <- read_sav("data/forskerlinje_friskestudenter_rettet_16_april.sav")
options(max.print = 2500)
describe(data_raw)
# Rename variables
names(data_raw)[names(data_raw) == "KJONN"] <- "Sex"
names(data_raw)[names(data_raw) == "SumbisNoFour"] <- "Insomnia"
names(data_raw)[names(data_raw) == "consci"] <- "Conscientiousness"
names(data_raw)[names(data_raw) == "agree"] <- "Agreeableness"
names(data_raw)[names(data_raw) == "neuro"] <- "Neuroticism"
names(data_raw)[names(data_raw) == "BAIsum"] <- "Anxiety"
names(data_raw)[names(data_raw) == "BDIsum"] <- "Depression"
names(data_raw)[names(data_raw) == "BRIEF_AI_T"] <- "Behavioral_regulation"
names(data_raw)[names(data_raw) == "BRIEF_MI_T"] <- "Metacognition"
options(max.print = 2500)
describe(data_raw)
data_raw |>
mutate(
across(c(Behavioral_regulation, Conscientiousness, Agreeableness, Neuroticism,
Depression, Anxiety, Insomnia), scale), .before=1) ->
data
Agreeableness, Neuroticism, Insomnia, as.factor(Sex)
impulse <- lm(BRIEF_IMPULSHEMMING_T ~ Depression, Anxiety, Conscientiousness,
Agreeableness, Neuroticism, Insomnia, as.factor(Sex), data = data)
# Rename variables
names(data_raw)[names(data_raw) == "KJONN"] <- "Sex"
# Rename variables
names(data)[names(data) == "KJONN"] <- "Sex"
names(data)[names(data) == "KJONN"] <- "Sex"
impulse <- lm(BRIEF_IMPULSHEMMING_T ~ Depression, Anxiety, Conscientiousness,
Agreeableness, Neuroticism, Insomnia, as.factor(Sex), data = data)
impulse <- lm(BRIEF_IMPULSHEMMING_T ~ Depression, Anxiety, Conscientiousness,
Agreeableness, Neuroticism, Insomnia, Sex, data = data)
impulse <- lm(BRIEF_IMPULSHEMMING_T ~ Depression, Anxiety, Conscientiousness,
Agreeableness, Neuroticism, Insomnia, KJONN, data = data)
impulse <- lm(BRIEF_IMPULSHEMMING_T ~ Depression, Anxiety, Conscientiousness,
Agreeableness, Neuroticism, Insomnia, data = data)
data_raw |>
mutate(
across(c(Behavioral_regulation, Conscientiousness, Agreeableness, Neuroticism,
Depression, Anxiety, Insomnia), scale), .before=1) ->
data
names(data)[names(data) == "KJONN"] <- "Sex"
impulse <- lm(BRIEF_IMPULSHEMMING_T ~ Depression, Anxiety, Conscientiousness,
Agreeableness, Neuroticism, Insomnia, data = data)
impulse <- lm(BRIEF_IMPULSHEMMING_T ~ Depression, Anxiety, Conscientiousness, Agreeableness, Neuroticism, Insomnia, data = data)
impulse <- lm(BRIEF_IMPULSHEMMING_T ~ Depression+ Anxiety +
Conscientiousness + Agreeableness + Neuroticism + Insomnia + Sex, data = data)
impulse <- lm(BRIEF_IMPULSHEMMING_T ~ Depression+ Anxiety +
Conscientiousness + Agreeableness + Neuroticism + Insomnia + Sex, data = data)
summary(impulse)
modelplot(impulse, coef_omit = 'Interc')
impulse <- lm(BRIEF_IMPULSHEMMING_T ~ Sex + Insomnia + Neuroticism +
Agreeableness + Conscientiousness + Anxiety + Depression, data = data)
summary(impulse)
modelplot(impulse, coef_omit = 'Interc')
impulse <- lm(BRIEF_IMPULSHEMMING_T ~ Sex + Insomnia + Conscientiousness +
Agreeableness + Neuroticism + Anxiety + Depression, data = data)
summary(impulse)
modelplot(impulse, coef_omit = 'Interc')
###############
# Define the function
run_regression <- function(dependent_var, data) {
# Construct the formula dynamically
formula <- as.formula(paste(dependent_var, "~ Sex + Insomnia + Conscientiousness +
Agreeableness + Neuroticism + Anxiety + Depression"))
# Run the linear model
model <- lm(formula, data = data)
# Return the model
return(model)
}
describe(data_raw)
# Example usage with a different dependent variable
model_result <- run_regression("BRIEF_FLEKSIBILITET_T ", data)
summary(model_result)
# Example usage with a different dependent variable
flexibility <- run_regression("BRIEF_FLEKSIBILITET_T ", data)
summary(model_result)
modelplot(flexibility, coef_omit = 'Interc')
data_raw |>
mutate(
across(c(Behavioral_regulation, Conscientiousness, Agreeableness, Neuroticism,
Depression, Anxiety, Insomnia, BRIEF_IMPULSHEMMING_T, BRIEF_FLEKSIBILITET_T,
BRIEF_EMOSJONELLKONTROLL_T, BRIEF_SELVMONITORERING_T, BRIEF_INITIERING_T
BRIEF_ARBEIDSHUKOMMELSE_T, BRIEF_PLANLEGGING_T, BRIEF_OPPGAVEMONITORERING_T,
data_raw |>
mutate(
across(c(Behavioral_regulation, Conscientiousness, Agreeableness, Neuroticism,
Depression, Anxiety, Insomnia, BRIEF_IMPULSHEMMING_T, BRIEF_FLEKSIBILITET_T,
BRIEF_EMOSJONELLKONTROLL_T, BRIEF_SELVMONITORERING_T, BRIEF_INITIERING_T,
BRIEF_ARBEIDSHUKOMMELSE_T, BRIEF_PLANLEGGING_T, BRIEF_OPPGAVEMONITORERING_T,
BRIEF_ORGANISERING_T), scale), .before=1) ->
data
names(data)[names(data) == "KJONN"] <- "Sex"
impulse <- lm(BRIEF_IMPULSHEMMING_T ~ Sex + Insomnia + Conscientiousness +
Agreeableness + Neuroticism + Anxiety + Depression, data = data)
summary(impulse)
modelplot(impulse, coef_omit = 'Interc')
###############
# Define the function
run_regression <- function(dependent_var, data) {
# Construct the formula dynamically
formula <- as.formula(paste(dependent_var, "~ Sex + Insomnia + Conscientiousness +
Agreeableness + Neuroticism + Anxiety + Depression"))
# Run the linear model
model <- lm(formula, data = data)
# Return the model
return(model)
}
# Example usage with a different dependent variable
flexibility <- run_regression("BRIEF_FLEKSIBILITET_T ", data)
summary(model_result)
modelplot(flexibility, coef_omit = 'Interc')
modelplot(flexibility, impulse, coef_omit = 'Interc')
# Example usage with a different dependent variable
impulse <- run_regression("BRIEF_IMPULSHEMMING_T ", data)
summary(model_result)
flexibility <- run_regression("BRIEF_FLEKSIBILITET_T ", data)
summary(model_result)
# Example usage with a different dependent variable
impulse <- run_regression("BRIEF_IMPULSHEMMING_T ", data)
summary(impulse)
# Example usage with a different dependent variable
impulse <- run_regression("BRIEF_IMPULSHEMMING_T ", data)
summary(impulse)
modelsummary
help(modelsummary)
# Plots
modelplot(impulse, coef_omit = 'Interc', stats = TRUE)
# Plots
modelplot(impulse, coef_omit = 'Interc', stats = TRUE: =.05)
# Plots
modelplot(impulse, coef_omit = 'Interc', stats = TRUE: +=.1)
# Enhance the plot with vertical lines at the ends of error bars and a box around the plot
plot +
theme(
plot <- modelplot(impulse, coef_omit = 'Interc', return_plot = TRUE)
# Create your model plot
plot <- modelplot(impulse, coef_omit = 'Interc', return_plot = TRUE)
# Enhance the plot with vertical lines at the ends of error bars and a box around the plot
plot +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2, position = position_dodge(0.5)) +
theme(
panel.border = element_rect(colour = "black", fill = NA, size = 1)  # Adds a box around the plot
)
# Ensure you have the necessary packages
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("jtools")) install.packages("jtools")
library(ggplot2)
library(jtools)
# Create your model plot
plot <- modelplot(impulse, coef_omit = 'Interc', return_plot = TRUE)
# Enhance the plot with vertical lines at the ends of error bars and a box around the plot
plot +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2, position = position_dodge(0.5)) +
theme(
panel.border = element_rect(colour = "black", fill = NA, size = 1)  # Adds a box around the plot
)
plot +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2, color = "blue", position = position_dodge(0.5)) +
theme(
panel.border = element_rect(colour = "black", fill = NA, size = 1),
text = element_text(size = 12, face = "bold"),
axis.title.x = element_text(face = "italic"),
axis.title.y = element_text(face = "italic")
) +
ggtitle("Model Plot with Enhanced Error Bars") +
xlab("Predictors") +
ylab("Estimates")
# Display the plot
print(plot)
# Plots
modelplot(impulse, coef_omit = 'Interc', stats = TRUE)
modelplot(flexibility, coef_omit = 'Interc')
# Ensure you have the necessary packages
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("jtools")) install.packages("jtools")
library(ggplot2)
library(jtools)
# Create your model plot
plot <- modelplot(impulse, coef_omit = 'Interc', return_plot = TRUE)
# Enhance the plot with vertical lines at the ends of error bars and a box around the plot
plot +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2, position = position_dodge(0.5)) +
theme(
panel.border = element_rect(colour = "black", fill = NA, size = 1)  # Adds a box around the plot
)
modelplot(flexibility, coef_omit = 'Interc', multi, shape = term : response ~ model)
modelplot(flexibility, coef_omit = 'Interc', shape = term : response ~ model)
# Assuming 'estimate' is used for y-values and there's an 'x' aesthetic already defined
plot +
geom_errorbar(aes(ymin = estimate - std.error, ymax = estimate + std.error),
width = 0.2, position = position_dodge(0.5)) +
theme(
panel.border = element_rect(colour = "black", fill = NA, size = 1)  # Adds a box around the plot
)
plot <- modelplot(impulse, coef_omit = 'Interc', return_plot = TRUE)
print(plot)
# Create the plot
plot <- ggplot(coefficients_df, aes(x = Predictor, y = Estimate, ymin = Estimate - 1.96 * Std. Error, ymax = Estimate + 1.96 * Std. Error)) +
# Create the plot
plot <- ggplot(coefficients_df, aes(x = Predictor, y = Estimate, ymin = Estimate - 1.96 * Std. Error, ymax = Estimate + 1.96 * Std. Error)) +
# Rename 'Std. Error' to 'Std_Error' to avoid issues in ggplot
names(coefficients_df)[names(coefficients_df) == "Std. Error"] <- "Std_Error"
# Rename 'Std. Error' to 'Std_Error' to avoid issues in ggplot
names(coefficients_df)[names(coefficients_df) == "Std. Error"] <- "Std_Error"
library(haven)
library(psych)
library(ggplot2)
library(dplyr)
library(rwa)
library(modelsummary)
data_raw <- read_sav("data/forskerlinje_friskestudenter_rettet_16_april.sav")
options(max.print = 2500)
describe(data_raw)
# Rename variables
names(data_raw)[names(data_raw) == "SumbisNoFour"] <- "Insomnia"
names(data_raw)[names(data_raw) == "consci"] <- "Conscientiousness"
names(data_raw)[names(data_raw) == "agree"] <- "Agreeableness"
names(data_raw)[names(data_raw) == "neuro"] <- "Neuroticism"
names(data_raw)[names(data_raw) == "BAIsum"] <- "Anxiety"
names(data_raw)[names(data_raw) == "BDIsum"] <- "Depression"
names(data_raw)[names(data_raw) == "BRIEF_AI_T"] <- "Behavioral_regulation"
names(data_raw)[names(data_raw) == "BRIEF_MI_T"] <- "Metacognition"
options(max.print = 2500)
describe(data_raw)
data_raw |>
mutate(
across(c(Behavioral_regulation, Conscientiousness, Agreeableness, Neuroticism,
Depression, Anxiety, Insomnia, BRIEF_IMPULSHEMMING_T, BRIEF_FLEKSIBILITET_T,
BRIEF_EMOSJONELLKONTROLL_T, BRIEF_SELVMONITORERING_T, BRIEF_INITIERING_T,
BRIEF_ARBEIDSHUKOMMELSE_T, BRIEF_PLANLEGGING_T, BRIEF_OPPGAVEMONITORERING_T,
BRIEF_ORGANISERING_T),
scale), .before=1) ->
data
names(data)[names(data) == "KJONN"] <- "Sex"
impulse <- lm(BRIEF_IMPULSHEMMING_T ~ Sex + Insomnia + Conscientiousness +
Agreeableness + Neuroticism + Anxiety + Depression, data = data)
summary(impulse)
###############
# Define the function
run_regression <- function(dependent_var, data) {
# Construct the formula dynamically
formula <- as.formula(paste(dependent_var, "~ Sex + Insomnia + Conscientiousness +
Agreeableness + Neuroticism + Anxiety + Depression"))
# Run the linear model
model <- lm(formula, data = data)
# Return the model
return(model)
}
# Example usage with a different dependent variable
impulse <- run_regression("BRIEF_IMPULSHEMMING_T ", data)
summary(impulse)
flexibility <- run_regression("BRIEF_FLEKSIBILITET_T ", data)
summary(flexibility)
# Plots
modelplot(impulse, coef_omit = 'Interc')
modelplot(flexibility, coef_omit = 'Interc')
# Rename 'Std. Error' to 'Std_Error' to avoid issues in ggplot
names(coefficients_df)[names(coefficients_df) == "Std. Error"] <- "Std_Error"
names(coefficients_df)[names(coefficients_df) == "Std. Error"] <- "Std_Error"
# Create the plot using backticks for 'Std. Error'
plot <- ggplot(coefficients_df, aes(x = Predictor, y = Estimate, ymin = Estimate - 1.96 * `Std. Error`, ymax = Estimate + 1.96 * `Std. Error`)) +
geom_pointrange() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
theme_minimal() +
labs(title = "Model Coefficients with Confidence Intervals",
x = "Predictor",
y = "Coefficient Estimate") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create the plot using backticks for 'Std. Error'
plot <- ggplot(coefficients_df, aes(x = Predictor, y = Estimate, ymin = Estimate - 1.96 * `Std. Error`, ymax = Estimate + 1.96 * `Std. Error`)) +
geom_pointrange() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
theme_minimal() +
labs(title = "Model Coefficients with Confidence Intervals",
x = "Predictor",
y = "Coefficient Estimate") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
